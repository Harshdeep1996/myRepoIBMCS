"""
Helper functions for dealing with various credentials
"""

import os
import ConfigParser
from collections import namedtuple


class Config():
    """
    Example usage:

        config = Config('~/.clou')
        pd_tuple = config['pagerduty']

    """
    def __init__(self, cfg_file='~/.clou'):
        """
        Creates an instance of a dictionary-like Config object, reading from
        the specified `cfg_file`.

        Example use:

            from utilitarian import config
            cfg = config.Config()
            fb_creds = cfg['fogbugz']

        :param cfg_file: The path to the ConfigParser compatible config file
        """
        self._cfg = ConfigParser.ConfigParser()
        self._cfg.read(os.path.expanduser(cfg_file))
        self.cfg_spec = {
            'aws': ['access_key_id', 'secret_access_key'],
            'dynect': ['customer', 'username', 'password'],
            'pagerduty': ['subdomain', 'api_key'],
            'trello': ['api_key', 'token'],
            'fogbugz': ['token', 'user', 'password'],
            'github': ['username', 'password', 'token'],
            'softlayer': ['username', 'api_key'],
            'cloobot': ['webhook'],
            'cloudant': [
                'adm_user',
                'adm_password',
                'user',
                'password',
                'web_user',
                'web_password'
            ]
        }

    def __getitem__(self, section):
        """
        Get the namedtuple representing the configuration held at `section` via
        a dictionary like interface.

        Build a named tuple representing the configuration at section, based on
        the spec defined in `__init__`. If a config file doesn't have an option
        for the section ignore it (which will result in AttributeError's if
        accessed later in the code.

        :param section: the section to retrieve
        """
        params = [x for x in self.cfg_spec[section] if self._cfg.has_option(section, x)]

        t = namedtuple(section, ' '.join(params))
        param_list = [self._cfg.get(section, x) for x in params]
        return t(*param_list)


def read_dot_clou():
    """
    utility to grab user/password creds from ~/.clou

    Returns the configuration as a ConfigParser object.
    """
    clou = os.path.expanduser("~/.clou")
    config = ConfigParser.RawConfigParser()
    config.read(clou)
    return config
