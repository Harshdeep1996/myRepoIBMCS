"""
Helper functions for dealing with FogBugz, our ticketing system.
"""
import requests
import json
import fogbugz
from utilitarian.credentials import Config


class FogBugzJson:
    def __init__(self, url):
        """
        Create the object pointing to FogBugz at `url`
        """
        self.url = url
        self.auth = None

    def logon(self, creds=None):
        """
        Connect to fogbugz and get a session token. Will pick up creds from
        ~/.clou if none are provided.
        """
        config = creds or Config()
        r = self.run(
            'logon',
            email=config['fogbugz'].user,
            password=config['fogbugz'].password
        )
        self.auth = r['data']['token']

    def run(self, cmd, **kwargs):
        """
        Run a command against the Fogbugz json API.

        .. code:: python
            fb.run(
                'search',
                q='title:"Foo" status:open',
                cols=["sTitle", "sStatus", "events"]
            )

        For more examples and API documentation see:
           http://help.fogcreek.com/10853/using-json-with-the-fogbugz-api
        """
        query = kwargs
        query["cmd"] = cmd
        if self.auth:
            query["token"] = self.auth
        r = requests.post(self.url, data=json.dumps(query))
        r.raise_for_status()
        return r.json()


def connect_to_fogbugz(fbfilter=None, creds=None):
    """
    Create an authenticated connection to the FogBugz API.

    Returns an instance of the FogBugz API

    :param filter: an optional filter ID
    :param creds: an optional credentials.Config object
    """
    config = creds or Config()
    fb = fogbugz.FogBugz("https://cloudant.fogbugz.com/")
    fb.logon(config['fogbugz'].user, config['fogbugz'].password)
    if fbfilter:
        fb.setCurrentFilter(sFilter=fbfilter)
    return fb


def ticket(fb, caseid=None, case={}):
    """
    Create or update a ticket via the FogBugz API.

    :param fb: an instance of the FogBugz API
    :param caseid: a case to update. If not set, create a new case
    :param case: a dictionary that contains all the fields for the ticket
    """
    if caseid:
        case.update({'ixBug': caseid})
        r = fb.edit(**case)
    else:
        r = fb.new(**case)
    return r
