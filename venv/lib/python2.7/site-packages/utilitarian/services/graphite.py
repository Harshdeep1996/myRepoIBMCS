"""
Helper functions for dealing with Graphite, our monitoring/metrics system.
"""

import requests
import urlparse
from time import time
from utilitarian.credentials import Config

GRAPHITE_URL = "https://graphite.cloudant.com/"


def graphite_session(creds=None):
    """
    Create an authenticated session for graphite.

    Returns a session object
    """
    config = creds or Config()
    session = requests.Session()
    session.auth = (config['cloudant'].web_user, config['cloudant'].web_password)
    return session


def get_graphite(query, session, start='-10mins', until='now'):
    """
    Retrieve json data from Graphite.

    :param query: the query you want to run against graphite
    :param session: a requests.Session() object, with auth
    :param start: start time, default -10mins
    :param until: until time, default now

    Returns a dict representation of the json response.
    """
    result = session.get(
        urlparse.urljoin(GRAPHITE_URL, 'render/'),
        params={
            'format': 'json',
            'from': start,
            'target': query,
        },
    )
    return result.json()


def send_event(session, subject, body="", tags=[], start=None, end=None):
    """
    Record an event into graphite

    :param session: a session to graphite - required
    :param subject: The "subject" of the event
    :param body: The body of the event
    :param tags: a list of tags to add to the event
    :param start: start time (defaults to now)
    :param end: end time (defaults to now)
    """
    if end is None:
        end = time()
    if start is None:
        start = time()

    event = {
        "what": subject,
        "tags": ",".join(tags),
        "data": {
            "start_time": start,
            "end_time": end
        },
        "description": message
    }

    session.post(
        urlparse.urljoin(GRAPHITE_URL, 'events/'),
        data=json.dumps(event),
        timeout=5
    )
